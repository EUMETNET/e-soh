syntax = "proto3";

package datastore;

import "google/protobuf/timestamp.proto";

option go_package = "./datastore";

// NOTES:
//
// - A _time series_ is a context defined by a set of metadata (defined in TSMetadata below) that
//   usually does not vary with observaion (time).
//
// - An _observation_ consists of a set of metadata (defined in ObsMetadata below) that usually
//   varies with observation (time). Note that for simplicity the observation value itself (such as
//   air temperature value 12.7) is also considered a metadata field (although strictly speaking
//   this is the only field that is just data, not metadata).
//
// - There is a 1:N relationship between time series and observations:
//   * A given time series (= unique combination of time series metadata fields) is associated with
//     one or more observations.
//   * A given observation (= unique combination of observation metadata fields) is associated with
//     exactly one time series.
//
// - In the below message definitions, all field names that contain underscores needs to
//   have [json_name = "..."] specified, otherwise e.g. 'a_b' will be formatted as 'aB' in the
//   output.
//
// - Metadata fields are categorized into reflectable and non-reflectable. A reflectable metadata
//   field has type int64 or string and can be handled dynamically in the datastore code using
//   reflection (https://en.wikipedia.org/wiki/Reflective_programming). The big advantage of this
//   is that it becomes very easy to modify the set of reflectable metadata fields as it requires
//   only two simple operations: 1) add/remove the field in the protobuf definition (this file!),
//   and 2) add/remove the corresponding field in the database schema. In other words, no literal
//   references to such fields are needed in the rest of the code.

service Datastore {
  // insert observations into the storage (or update existing ones)
  rpc PutObservations(PutObsRequest) returns (PutObsResponse);

  // retrieve observations from the storage
  rpc GetObservations(GetObsRequest) returns (GetObsResponse);

  // get unique combinations of a set of time series attributes
  rpc GetTSAttrGroups(GetTSAGRequest) returns (GetTSAGResponse);

  // get temporal and spatial extents of current storage contents
  rpc GetExtents(GetExtentsRequest) returns (GetExtentsResponse);
}

//---------------------------------------------------------------------------

message Point { // horizontal position
  double lat = 1; // latitude degrees in range [-90, 90]
  double lon = 2; // longitude degrees in range [-180, 180]
}

message Polygon { // horizontal area; three or more points
  repeated Point points = 1;
}

message Circle { // horizontal circle area
  Point center = 1;
  double radius = 2; // radius in kilometers
}

message BoundingBox {
  double left = 1;
  double bottom = 2;
  double right = 3;
  double top = 4;
}

message TimeInterval {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

message Link {
  string href = 1;
  string rel = 2;
  string type = 3;
  string hreflang = 4;
  string title = 5;
}

message TSMetadata {
  // --- BEGIN non-reflectable metadata -----------------
  repeated Link links = 1;
  // --- END non-reflectable metadata -----------------

  // --- BEGIN reflectable metadata (of type int64 or string) -----------------
  string version = 2;
  string type = 3;
  string title = 4;
  string summary = 5;
  string keywords = 6;
  string keywords_vocabulary = 7 [json_name = "keywords_vocabulary"];
  string license = 8;
  string conventions = 9;
  string naming_authority = 10 [json_name = "naming_authority"];
  string creator_type = 11 [json_name = "creator_type"];
  string creator_name = 12 [json_name = "creator_name"];
  string creator_email = 13 [json_name = "creator_email"];
  string creator_url = 14 [json_name = "creator_url"];
  string institution = 15;
  string project = 16;
  string source = 17;
  string platform = 18;
  string platform_vocabulary = 19 [json_name = "platform_vocabulary"];
  string platform_name = 20 [json_name = "platform_name"];
  string standard_name = 21 [json_name = "standard_name"];
  string unit = 22;
  int64 level = 23;
  string function = 24;
  int64 period = 25;
  string instrument = 26;
  string instrument_vocabulary = 27 [json_name = "instrument_vocabulary"];
  string parameter_name = 28 [json_name = "parameter_name"];

  // a 1-1 relationship with (naming_authority, platform, standard_name, level, function, period,
  // instrument); typically a hash of those
  string timeseries_id = 29 [json_name = "timeseries_id"];

  // --- END reflectable metadata -----------------
}

message ObsMetadata {
  // --- BEGIN non-reflectable metadata -----------------
  oneof geometry {
    Point geo_point = 1 [json_name = "geo_point"];
    Polygon geo_polygon = 2 [json_name = "geo_polygon"];
  }
  oneof obstime {
    google.protobuf.Timestamp obstime_instant = 3 [json_name = "obstime_instant"];
    //TimeInterval obstime_interval = 4 [json_name = "obstime_interval"]; -- unsupported for now
  }
  google.protobuf.Timestamp pubtime = 5;
  // --- END non-reflectable metadata -----------------

  // --- BEGIN reflectable metadata (of type int64 or string)
  string id = 6;
  string data_id = 7 [json_name = "data_id"];
  string history = 8;
  string processing_level = 10 [json_name = "processing_level"];
  int64 camsl = 11; // centimeters above mean sea level
  // Case 1 - stationary data: camsl of the station ground position
  // Case 2 - mobile data: camsl of the sensor itself
  // NOTE: in Case 1, the absolute vertical location of the sensor would be camsl + level where
  //   level is the height above ground (hag) of the sensor. (Typical values for level are the WMO
  //   standard 2m for temperature and 10m for wind.)
  // --- END reflectable metadata -----------------

  string value = 12; // obs value (not metadata in a strict sense)
}

//---------------------------------------------------------------------------

message Metadata1 { // denormalized (more redundancy)
  TSMetadata ts_mdata = 1 [json_name = "ts_mdata"];
  ObsMetadata obs_mdata = 2 [json_name = "obs_mdata"];
}

message Metadata2 { // normalized  (less redundancy)
  TSMetadata ts_mdata = 1 [json_name = "ts_mdata"];
  repeated ObsMetadata obs_mdata = 2 [json_name = "obs_mdata"];
}

//---------------------------------------------------------------------------

message PutObsRequest {
  repeated Metadata1 observations = 1;
}

message PutObsResponse {
  int32 status = 1;
  string error = 2; // any error description (empty on success)
}

//---------------------------------------------------------------------------

message Strings {
  repeated string values = 1;
}

message GetObsRequest {
  // --- BEGIN filters for non-reflectable metadata -------------------------

  // --- BEGIN temporal spec ----------------------------------
  bool temporal_latest = 1;
  TimeInterval temporal_interval = 2;

  // combinations:

	// latest | interval       | description
	// -------------------------------------------------------------------------------------
	// false  | not specified  | get all obs. in the entire buffer (typically last 24 hours)
	// false  | specified      | get all obs. in the specified interval
	// true   | not specified  | get the single latest obs. in the entire buffer
	// true   | specified      | get the single latest obs. in the specified interval

  // --- END temporal spec ----------------------------------

  // spatial filter
  Polygon spatial_polygon = 3; // if specified, only observations in this polygon may be returned
  Circle spatial_circle = 4; // if specified, only observations in this circle may be returned

  // search wrt. TSMetadata.links
  // TODO - needs special handling

  // --- END filters for non-reflectable metadata -------------------------

  // --- BEGIN filter for reflectable metadata of type int64 or string -------------------------

  // general filter
  //
  // - The map key must correspond exactly with a reflectable field name in TSMetadata or
  //   ObsMetadata (for example 'institution' or 'level' in TSMedatata, or 'processing_level' in
  //   ObsMetadata).
  //
  // - The map value for key F is a list of patterns. Only observations with an F that matches at
  //   least one of these patterns may be returned.
  //
  // - The match condition for a pattern P depends on the type of the map key F:
  //
  //   Case 1 - string:
  //
  //       The value V of F matches P in a case-insensitive way and with P optionally containing
  //       asterisks to represent zero or more characters.
  //       Example: for F='institution', V='MET Norway', the following values for P will match:
  //       'MET Norway', 'met norway', 'MET*', '*et*'.
  //
  //   Case 2 - int64:
  //
  //       Case 2.1: P has the form 'lo/hi', where lo and hi are both int64s, and the value V of F
  //           matches P if lo <= V <= hi.
  //           Example: for F='level', V='10', the following values for P will match:
  //           '10/10', '-10/10', '9/10', '10/11'.
  //
  //       Case 2.2: P has the form '../hi', where hi is an int64, and the value V of F matches P
  //           if V <= hi.
  //           Example: for F='level', V='10', the following values for P will match:
  //           '../10', '../11'.
  //
  //       Case 2.3: P has the form 'lo/..', where lo is an int64, and the value V of F matches P
  //           if lo <= V.
  //           Example: for F='level', V='10', the following values for P will match:
  //           '10/..', '9/..'.
  //
  //       Case 2.4: P has the form '../..' and any value V of F matches P. NOTE: this is the
  //           default behavior and is thus never required to be explicitly specified (it is
  //           supported for completeness/consistency).
  //
  //       Case 2.5: If P is not any of the integer interval forms of Case 2.1..4, then the value
  //           V of F is converted to a string and matched against P just like in Case 1.
  //           Example: for F='level', V='10', the following values for P will match:
  //           '10', '1*', '*0', '*'.
  //
  map<string, Strings> filter = 5;

  // --- END filter for reflectable metadata of type int64 or string -------------------------

  // Fields to include in GetObsResponse.
  // Case 1: included_response_fields is omitted or empty=> implicitly include all available fields.
  // Case 2: included_response_fields contains one or more fields =>
  //   Each field must be one of the following:
  //     * a reflectable string field in TSMetadata (like 'keywords') or ObsMetadata (like
  //       'history')
  //     * 'links' (non-reflectable field in TSMedatata)
  //     * 'geo_point' (non-reflectable field in ObsMetadata)
  //     * 'obstime_instant' (--- '' ---)
  //     * 'pubtime' (--- '' ---)
  //     * 'value' (non-reflection handleable string field in ObsMetadata)
  repeated string included_response_fields = 6;

  // repeated string excluded_response_fields = 7; // TODO
}

message GetObsResponse {
  int32 status = 1;
  string error = 2; // any error description (empty on success)
  repeated Metadata2 observations = 3;
}

//---------------------------------------------------------------------------

message TSMdataGroup {
  TSMetadata combo = 1;
  repeated TSMetadata instances = 2;
}

message GetTSAGRequest {
  repeated string attrs = 1; // one or more TSMetadata field names
  bool include_instances = 2 [json_name = ""]; // whether to include all matching time series instances in response
}

message GetTSAGResponse {
  repeated TSMdataGroup groups = 1; // zero or more groups of unique combinations of
  // GetTSAGRequest.attrs currently existing in the storage.
  //
  // - The combo of each group always contains the GetTSACRequest.attrs in question, with all other
  //   attributes set to default values (typically empty strings).
  //
  // - If GetTSAGRequest.include_instances is true, the instances array of each group contains
  //   all time series instances that match GetTSACRequest.attrs (note that GetTSAGRequest.attrs
  //   will be repeated in each item).
  //
  // - If GetTSAGRequest.include_instances is false (the default), the instances arrays are omitted.
}

//---------------------------------------------------------------------------

message GetExtentsRequest {
  // No parameters
}

message GetExtentsResponse {
  int32 status = 1;
  string error = 2; // any error description (empty on success)
  TimeInterval temporal_extent = 3 [json_name = "temporal_extent"];
  BoundingBox spatial_extent = 4 [json_name = "spatial_extent"];
}
