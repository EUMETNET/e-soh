name: CI

on:
  push:
    branches:
      - "**"
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: read

jobs:
  pre-commit-hook:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: Install pre-commit
        run: python -m pip install pre-commit
        shell: bash
      - name: Show pre-commit requirements
        run: python -m pip freeze --local
        shell: bash
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-3|${{ env.pythonLocation }}|${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Run pre-commit for all files
        run: pre-commit run --config './.pre-commit-config.yaml' --all-files --color=always --show-diff-on-failure
        shell: bash

  test-datastore:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Copy Protobuf files to Dockerfile directories
        run: ./ci/docker/copy-protobuf.sh

      - name: Build docker containers
        run: docker compose --profile test build

      - name: Start docker stack
        run: DYNAMICTIME=false LOTIME=1000-01-01T00:00:00Z HITIME=9999-12-31T23:59:59Z docker compose up -d --wait --wait-timeout 120

      - name: Test loader runs without errors
        run: DYNAMICTIME=false LOTIME=1000-01-01T00:00:00Z HITIME=9999-12-31T23:59:59Z docker compose run --rm loader

      - name: Integration test
        run: DYNAMICTIME=false LOTIME=1000-01-01T00:00:00Z HITIME=9999-12-31T23:59:59Z docker compose run --rm integration

      - name: Test client runs without errors
        run: DYNAMICTIME=false LOTIME=1000-01-01T00:00:00Z HITIME=9999-12-31T23:59:59Z docker compose run --rm client

      - name: Run load test
        run: |
          python --version
          pip install -r datastore/load-test/requirements.txt
          python -m grpc_tools.protoc --proto_path=./protobuf datastore.proto --python_out=datastore/load-test --grpc_python_out=datastore/load-test
          cd datastore/load-test
          locust --headless -u 5 -r 1 --run-time 60 --only-summary --csv store

      - name: Archive load test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: performance
          path: datastore/load-test/store_*.csv

      - name: Print results
        run: |
          pip install csvkit
          echo "## Stats" >> $GITHUB_STEP_SUMMARY
          csvlook datastore/load-test/store_stats.csv >> $GITHUB_STEP_SUMMARY
          echo "## Stats history" >> $GITHUB_STEP_SUMMARY
          csvlook datastore/load-test/store_stats_history.csv >> $GITHUB_STEP_SUMMARY
          echo "## Failures" >> $GITHUB_STEP_SUMMARY
          csvlook datastore/load-test/store_failures.csv >> $GITHUB_STEP_SUMMARY

      - name: Cleanup
        if: always()
        run: docker compose down --volumes

  test-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read|write
      issues: read|write
      pull-requests: read|write

    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pytest-timeout
          pip install pytest-cov
          pip install -r ./api/requirements.txt

      - name: Copy Protobuf file to api directory and build
        run: |
          mkdir ./api/protobuf
          cp ./protobuf/datastore.proto ./api/protobuf/datastore.proto
          python -m grpc_tools.protoc --proto_path=./api/protobuf --python_out=./api --grpc_python_out=./api ./api/protobuf/datastore.proto

      - name: Run Tests
        run: |
          cd api
          python -m pytest --timeout=60 --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=. | tee pytest-coverage.txt

      - name: Comment coverage
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./api/pytest-coverage.txt
          title: API Unit Test Coverage Report
          hide-badge: true
          hide-report: false
          create-new-comment: false
          hide-comment: false
          report-only-changed-files: false
          remove-link-from-badge: false
          junitxml-path: ./api/pytest.xml
          junitxml-title: API Unit Test Coverage Summary

  test-ingest:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"] # Add 3.11 back pybind11 bug is fixed
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      - name: Ubuntu setup
        run: sudo apt update && sudo apt install libeccodes-data	rapidjson-dev	pybind11-dev libssl-dev
      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Checkout Source
        uses: actions/checkout@v3
      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pytest-timeout
          pip install pytest-cov
          pip install ./ingest
      - name: Run Tests
        run: python -m pytest -v --timeout=60 ./ingest
