syntax = "proto3";

package datastore;

import "google/protobuf/timestamp.proto";

option go_package = "./datastore";

// Notes:
// - A 'time series' has a globally unique ID, serves a container/context for
//   observations, and contains overall metadata that are independent of obs
//   time.
// - An 'observation' belongs to a time series and contains obs time, obs value,
//   and metadata that depend on obs time.
// - All obs times are of type google.protobuf.Timestamp

service Datastore {
  rpc AddTimeSeries(AddTSRequest) returns (AddTSResponse);
  rpc FindTimeSeries(FindTSRequest) returns (FindTSResponse);
  //rpc DeleteTimeSeries(DeleteTSRequest) returns (DeleteTSResponse);
  //rpc UpdateTimeSeries(UpdateTSRequest) returns (UpdateTSResponse);
  rpc PutObservations(PutObsRequest) returns (PutObsResponse);
  rpc GetObservations(GetObsRequest) returns (GetObsResponse);
}

//---------------------------------------------------------------------------

message Point { // horizontal position
  double lat = 1; // latitude degrees in range [-90, 90]
  double lon = 2; // longitude degrees in range [-180, 180]
}

//---------------------------------------------------------------------------

message TSMetadata {
  string station_id = 1;
  string param_id = 2;
  Point pos = 3;
  string other1 = 4; // for now
  string other2 = 5; // for now
  string other3 = 6; // for now
  // ...
}

message AddTSRequest {
  int64 id = 1;
  TSMetadata metadata = 2;
}

message AddTSResponse {
  int32 status = 1;
  string error = 2; // empty on success
}

//---------------------------------------------------------------------------

message Polygon { // horizontal area
  // three or more points with an implicit edge between the first and last point
  repeated Point points = 1;
}

message FindTSRequest {
  repeated string station_ids = 1; // if specified, only return time series matching any of these station IDs
  repeated string param_ids = 2; // if specified, only return time series matching any of these param IDs
  Polygon inside = 3; // if specified, only return time series located inside this area
  // TODO: add search filters for other metadata
}

message FindTSResponse {
  int32 status = 1;
  string error = 2; // empty on success
  repeated int64 ids = 3; // matching time series IDs
  repeated TSMetadata metadata = 4; // corresponding metadata
}

//---------------------------------------------------------------------------

message ObsMetadata {
  string field1 = 1; // for now
  string field2 = 2; // for now
  // ...
}

message Observation {
  google.protobuf.Timestamp time = 1; // obs time
  double value = 2; // for now
  ObsMetadata metadata = 3;
}

message TSObservations {
  int64 tsid = 1; // time series ID
  repeated Observation obs = 2; // assuming strictly increasing obs time
}

//---------------------------------------------------------------------------

message PutObsRequest {
  repeated TSObservations tsobs = 1; // assuming distinct time series IDs
}

message PutObsResponse {
  int32 status = 1;
  string error = 2; // empty on success
}

//---------------------------------------------------------------------------

message GetObsRequest {
  repeated int64 tsids = 1; // assuming distinct time series IDs
  google.protobuf.Timestamp fromtime = 2; // earliest obs time
  google.protobuf.Timestamp totime = 3; // latest obs time
}

message GetObsResponse {
  int32 status = 1;
  string error = 2; // empty on success
  repeated TSObservations tsobs = 3; // same time series IDs as in request
}
