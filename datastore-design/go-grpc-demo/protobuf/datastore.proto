syntax = "proto3";

package datastore;

option go_package = "./datastore";

// Notes:
// - A time series has globally unique ID, serves a container/context for
//   observations, and contains overall metadata that are independent of obs
//   time.
// - An observation belongs to a time series and contains obs time, obs value,
//   and metadata that depend on obs time.
// - All obs times are Unix timestamp (i.e. relative to Unix epoch)

service Datastore {
  rpc AddTimeSeries(AddTSRequest) returns (AddTSResponse);
  //rpc DescribeTimeSeries(DescribeTSRequest) returns (DescribeTSResponse);
  //rpc FindTimeSeries(FindTSRequest) returns (FindTSResponse);
  //rpc DeleteTimeSeries(DeleteTSRequest) returns (DeleteTSResponse);
  //rpc UpdateTimeSeries(UpdateTSRequest) returns (UpdateTSResponse);
  rpc PutObservations(PutObsRequest) returns (PutObsResponse);
  rpc GetObservations(GetObsRequest) returns (GetObsResponse);
}

//---------------------------------------------------------------------------

message TSMetadata {
  string field1 = 1; // for now
  string field2 = 2; // for now
  string field3 = 3; // for now
  // ...
}

message AddTSRequest {
  int64 id = 1;
  TSMetadata metadata = 2;
}

message AddTSResponse {
  int32 status = 1;
  string error = 2; // empty on success
}

//---------------------------------------------------------------------------

message ObsMetadata {
  string field1 = 1; // for now
  string field2 = 2; // for now
  // ...
}

message Observation {
  int64 time = 1; // obs time
  double value = 2; // for now
  ObsMetadata metadata = 3;
}

message TSObservations {
  int64 tsid = 1; // time series ID
  repeated Observation obs = 2; // assuming strictly increasing obs time
}

//---------------------------------------------------------------------------

message PutObsRequest {
  repeated TSObservations tsobs = 1; // assuming distinct time series IDs
}

message PutObsResponse {
  int32 status = 1;
  string error = 2; // empty on success
}

//---------------------------------------------------------------------------

message GetObsRequest {
  repeated int64 tsids = 1; // assuming distinct time series IDs
  int64 fromtime = 2; // earliest obs time
  int64 totime = 3; // latest obs time
}

message GetObsResponse {
  int32 status = 1;
  string error = 2; // empty on success
  repeated TSObservations tsobs = 3; // same time series IDs as in request
}
